# ==============================================================================
# Research Paper Recommendation and Subject Area Prediction System
# Dependencies and Version Requirements
# ==============================================================================
#
# This file specifies all Python packages required for the project with
# exact version numbers to ensure reproducibility and compatibility.
#
# Installation:
#   pip install -r requirements.txt
#
# For GPU support, ensure CUDA 11.8+ and cuDNN 8.x are installed first:
#   https://developer.nvidia.com/cuda-11-8-0-download-archive
#   https://developer.nvidia.com/cudnn
#
# Last Updated: January 2025
# Python Version: 3.8 - 3.11 (3.10 recommended)
# ==============================================================================

# ------------------------------------------------------------------------------
# Deep Learning Frameworks
# ------------------------------------------------------------------------------

# TensorFlow - Multi-Label MLP Classifier
# Used for: Training the 512â†’256 neuron MLP with early stopping
# GPU Support: Requires CUDA 11.8+ and cuDNN 8.x
# Size: ~500 MB
tensorflow==2.15.0

# PyTorch - Backend for Sentence-BERT
# Used for: Sentence-BERT model inference, tensor operations
# GPU Support: CUDA 11.8 (automatically installed with +cu118 index)
# Size: ~2 GB with CUDA
torch==2.0.1

# TorchVision - Computer Vision utilities (dependency of PyTorch)
# Used for: PyTorch compatibility
# Size: ~10 MB
torchvision==0.15.2

# ------------------------------------------------------------------------------
# NLP and Embeddings
# ------------------------------------------------------------------------------

# Sentence Transformers - Pre-trained sentence embeddings
# Used for: Loading all-MiniLM-L6-v2 model, generating 384-dim embeddings
# Models Downloaded: all-MiniLM-L6-v2 (80 MB, auto-download on first use)
# Size: ~50 MB (library) + 80 MB (model)
sentence-transformers==3.0.1

# Hugging Face Transformers - NLP model hub (auto-installed with sentence-transformers)
# Used for: Tokenization, model configuration
# Size: ~400 MB
transformers==4.36.0

# ------------------------------------------------------------------------------
# Data Processing and Analysis
# ------------------------------------------------------------------------------

# Pandas - Data manipulation and analysis
# Used for: CSV loading, DataFrame operations, data cleaning
# Size: ~10 MB
pandas==2.1.4

# NumPy - Numerical computing
# Used for: Array operations, mathematical functions
# Size: ~15 MB
numpy==1.24.3

# scikit-learn - Machine learning utilities
# Used for: train_test_split, MultiLabelBinarizer, metrics
# Size: ~30 MB
scikit-learn==1.3.2

# ------------------------------------------------------------------------------
# Visualization
# ------------------------------------------------------------------------------

# Matplotlib - Plotting library
# Used for: Learning curves, training history visualization
# Size: ~30 MB
matplotlib==3.8.2

# Seaborn - Statistical visualization
# Used for: Confusion matrices, distribution plots
# Size: ~5 MB
seaborn==0.13.0

# ------------------------------------------------------------------------------
# Web Framework (Optional - for deployment)
# ------------------------------------------------------------------------------

# Flask - Web application framework
# Used for: REST API, web interface
# Size: ~5 MB
flask==3.0.0

# Flask-CORS - Cross-Origin Resource Sharing
# Used for: API access from different domains
# Size: <1 MB
flask-cors==4.0.0

# Streamlit - Data app framework (alternative to Flask)
# Used for: Quick interactive web apps
# Size: ~10 MB
streamlit==1.29.0

# ------------------------------------------------------------------------------
# Utilities
# ------------------------------------------------------------------------------

# Jupyter - Interactive notebook environment
# Used for: Running the training notebook
# Size: ~20 MB
jupyter==1.0.0

# psutil - System and process utilities
# Used for: Memory monitoring, system resource checks
# Size: <1 MB
psutil==5.9.6

# tqdm - Progress bars
# Used for: Training progress visualization (auto-installed with sentence-transformers)
# Size: <1 MB
tqdm==4.66.1

# ------------------------------------------------------------------------------
# GPU-Specific (Optional - uncomment if using GPU)
# ------------------------------------------------------------------------------

# For NVIDIA GPUs, install PyTorch with CUDA support:
# pip install torch==2.0.1+cu118 --extra-index-url https://download.pytorch.org/whl/cu118

# For TensorFlow GPU (Windows):
# pip install tensorflow[and-cuda]==2.15.0

# ------------------------------------------------------------------------------
# Development Tools (Optional)
# ------------------------------------------------------------------------------

# ipykernel - Jupyter kernel
# Used for: Running notebooks
# Size: ~5 MB
ipykernel==6.27.1

# ipywidgets - Interactive widgets
# Used for: Notebook interactivity
# Size: ~2 MB
ipywidgets==8.1.1

# ------------------------------------------------------------------------------
# Total Size Estimate
# ------------------------------------------------------------------------------
# Base packages: ~3.5 GB (with GPU support)
# Base packages: ~1.5 GB (CPU-only)
# Model downloads: ~80 MB (all-MiniLM-L6-v2, downloaded on first use)
# Dataset: ~350 MB (downloaded separately from Kaggle)
# Trained models: ~247 MB (generated during training)
# Total disk space: ~6 GB (GPU) or ~4 GB (CPU)

# ------------------------------------------------------------------------------
# Installation Notes
# ------------------------------------------------------------------------------
#
# 1. Windows Long Path Support (Windows users MUST enable this first):
#    PowerShell (Run as Administrator):
#      New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
#                       -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force
#    Then restart computer.
#
# 2. Virtual Environment (Recommended):
#    python -m venv venv
#    venv\Scripts\activate  (Windows)
#    source venv/bin/activate  (Linux/Mac)
#
# 3. Install Dependencies:
#    pip install --upgrade pip
#    pip install -r requirements.txt
#
# 4. Verify Installation:
#    python check_setup.py
#
# 5. GPU Configuration:
#    python gpu_config.py
#
# ------------------------------------------------------------------------------
# Troubleshooting
# ------------------------------------------------------------------------------
#
# Problem: TensorFlow installation fails
# Solution: Enable Windows Long Path support (see step 1 above)
#
# Problem: "No module named 'tensorflow'"
# Solution: pip install tensorflow==2.15.0
#
# Problem: GPU not detected
# Solution: Install CUDA 11.8 and cuDNN 8.x, then reinstall TensorFlow GPU
#
# Problem: Out of memory during installation
# Solution: Install packages one at a time:
#   pip install tensorflow==2.15.0
#   pip install torch==2.0.1
#   pip install sentence-transformers==3.0.1
#   ... (continue with remaining packages)
#
# For more help, see QUICK_START_GUIDE.md or SETUP_GUIDE.md
# ==============================================================================
